#lang racket
(require srfi/13)

;; Este programa resolve um jogo infinity rotacionando seus blocos
;; até que todos se encaixem entre si. O método de resolução utilizado será
;; por meio de busca com retrocesso (backtracking).
;;
;; ** Conceitos ** 
;; Bloco
;;  Um bloco é uma peça do jogo Infinity. O bloco é representado como um
;;  caractere quando lido ou escrito de um arquivo, e representado como um
;;  número entre 0 e 15 quando processado dentro do programa.
;; Jogo
;;  Um jogo Infinity é um tabuleiro de M linhas e N colunas (tamanho MxN)
;;  preenchidas por blocos. O jogo infinity é dito resolvido quando todos seus
;;  blocos estão conectados. O jogo é representado por uma lista de listas.

;; exporta as funções que podem ser utilizadas em outros arquivos
(provide tamanho
         rotacionar
         encaixa-h?
         encaixa-v?
         seguro?
         resolver
         main)

;; lista com as representações dos blocos como caracteres
(define blocos-reps (string->list " ╹╺┗╻┃┏┣╸┛━┻┓┫┳╋"))

;; lista com as numerações dos blocos que tem saida a direita
(define blocos-saida-direita (list 2 3 6 7 10 11 14 15))

;; lista com as numerações dos blocos que NÃO tem saida a direita
(define blocos-nao-saida-direita (list 0 1 4 5 8 9 12 13))

;; lista com as numerações dos blocos que tem entrada a esquerda
(define blocos-entrada-esquerda (list 8 9 10 11 12 13 14 15))

;; lista com as numerações dos blocos que tem saida a abaixo
(define blocos-saida-abaixo (list 4 5 6 7 12 13 14 15))

;; lista com as numerações dos blocos que NÃO tem saida a abaixo
(define blocos-nao-saida-abaixo (list 0 1 2 3 8 9 10 11))

;; lista com as numerações dos blocos que tem entrada acima
(define blocos-entrada-acima (list 1 3 5 7 9 11 13 15))

;; Tamanho representa o tamanho de um jogo em altura e largura
;;     altura : Número - quantidade de linhas do jogo.
;;    largura : Número - quantidade de colunas do jogo.
(struct tamanho (altura largura) #:transparent)

;; Bloco -> Bloco
;; --------------
;; Rotaciona um bloco 90 graus em sentido horário
;; Exemplo: (rotacionar 5)
;;          > 10
(define (rotacionar bloco)
  [cond
    ((equal? bloco 0) 0)
    ((equal? bloco 1) 2)
    ((equal? bloco 2) 4)
    ((equal? bloco 3) 6)
    ((equal? bloco 4) 8)
    ((equal? bloco 5) 10)
    ((equal? bloco 6) 12)
    ((equal? bloco 7) 14)
    ((equal? bloco 8) 1)
    ((equal? bloco 9) 3)
    ((equal? bloco 10) 5)
    ((equal? bloco 11) 7)
    ((equal? bloco 12) 9)
    ((equal? bloco 13) 11)
    ((equal? bloco 14) 13)
    ((equal? bloco 15) 15)])

;;Lista Número -> Booleano
;;Devolve a presença de um item na lista
;;Exemplo: (tem-na-lista? '(1 2 3) 3)
;; > #t
(define (tem-na-lista? lista nr)
  (not (null? (index-of lista nr))))

;; Bloco Bloco -> Lógico
;; ---------------------
;; Verifica se o bloco-e se encaixa horizontalmente à esquerda do bloco-d
;; Exemplo: (encaixa-h? 7 9)
;;          > #t
(define (encaixa-h? bloco-e bloco-d)
  [cond
    ;;compara os que NÃO TEM saida a direita com os que tem entrada a esquerda,
    ;;se bater retorna #F já que não forma encaixe, se não tiver entrada na direita, #T
    ((and (tem-na-lista? blocos-nao-saida-direita bloco-e) (not(tem-na-lista? blocos-entrada-esquerda bloco-d))) #t)
    ;;compara os que tem saida a direita com os que tem entrada a esquerda, se encaixar retorna #t
    ((and (tem-na-lista? blocos-saida-direita bloco-e) (tem-na-lista? blocos-entrada-esquerda bloco-d)) #t)
    (else
     #f)])

;; Bloco Bloco -> Lógico
;; ---------------------
;; Verifica se o bloco-t se encaixa verticalmente acima do bloco-b
;; Exemplo: (encaixa-v? 14 11)
;;          > #t
(define (encaixa-v? bloco-t bloco-b)
  [cond
    ;;compara os que NÃO TEM saida abaixo com os que tem entrada acima,
    ;;se bater retorna #F já que não forma encaixe, se não tiver entrada na abaixo, #T
    ((and (tem-na-lista? blocos-nao-saida-abaixo bloco-t)
          (not(tem-na-lista? blocos-entrada-acima bloco-b))) #t)
    ;;compara os que tem saida a abaixo com os que tem entrada acima, se encaixar retorna #t
    ((and (tem-na-lista? blocos-saida-abaixo bloco-t) (tem-na-lista? blocos-entrada-acima bloco-b)) #t)
    (else
     #f)])

;; Bloco -> Lógico
;; ---------------------
;; Verifica se o bloco se encaixa horizontalmente à esquerda do ultimo bloco (vazio)
;; Exemplo: (encaixa-ultimo-direita? 0)
;;          > #t
(define (encaixa-ultimo-direita? bloco)
  (encaixa-h? bloco 0))

;; Bloco -> Lógico
;; ---------------------
;; Verifica se o bloco se encaixa horizontalmente à direita do primeiro bloco (vazio)
;; Exemplo: (encaixa-ultimo-esquerda? 0)
;;          > #t
(define (encaixa-ultimo-esquerda? bloco)
  (encaixa-h? 0 bloco))

;; Bloco -> Lógico
;; ---------------------
;; Verifica se o bloco se encaixa verticalmente abaixo do primeiro bloco (vazio)
;; Exemplo: (encaixa-ultimo-acima? 0)
;;          > #t
(define (encaixa-ultimo-acima? bloco)
  (encaixa-v? 0 bloco))

;; Bloco  -> Lógico
;; ---------------------
;; Verifica se o bloco se encaixa verticalmente acima do ultimo bloco (vazio)
;; Exemplo: (encaixa-ultimo-abaixo? 0)
;;          > #t
(define (encaixa-ultimo-abaixo? bloco)
  (encaixa-v? bloco 0))

;; Lista Bloco  -> Lógico
;; ---------------------
;; Verifica se o bloco se encaixa horizontalmente com o anterior
;; Exemplo: (encaixa-anterior? '( 0) 0)
;;          > #t
(define (encaixa-anterior? solucao bloco)
(encaixa-h? (list-ref solucao 0) bloco))

;; Lista Bloco tam  -> Lógico
;; ---------------------
;; Verifica se o bloco se encaixa horizontalmente com o anterior
;; Exemplo: (encaixa-superior? '( 0) 0 2)
;;          > #t
(define (encaixa-superior? solucao bloco tam)
(encaixa-v? (list-ref solucao (sub1 (tamanho-largura tam))) bloco))

;; Lista numero -> Lógico
;; ---------------------
;; Verifica se o bloco e o ultimo da fileira
;; Exemplo: (e-o-ultimo? '(1) 2)
;;          > #t
(define (e-o-ultimo? lista tam)
  (zero? (remainder (add1 (length lista)) tam)))

;; Lista numero -> Lógico
;; ---------------------
;; Verifica se o bloco e o primeiro da fileira
;; Exemplo: (e-o-ultimo? '() 2)
;;          > #t
(define (e-o-primeiro? lista tam)
  (zero? (remainder (length lista) tam)))

;; Bloco List Tamanho -> Lógico
;; -----------------------------
;; Verifica se um bloco é seguro de ser adicionado a uma solução. Ser 
;; seguro significa que, ao ser adicionado à solução, o bloco se 
;; encaixa a todos os blocos adjacentes à posição em que ele seria 
;; inserido. Uma solução é uma lista de blocos que representa a solução 
;; do jogo até o presente momento. Para facilitar a implementação, 
;; considere que a solução será construída em ordem invertida. Assim, a 
;; solução '(9 7 12 14 6), referente ao um jogo de tamanho 4x3, 
;; representa a seguinte situação:
;; 
;; [6][14][12]    [┏][┳][┓]
;; [7][ 9][ 5] => [┣][┛][┃]
;; [7][  ][  ]    [┣][┳][ ]
;; [ ][  ][  ]    [ ][ ][ ]
;; 
;; A chamada (seguro? 5 '(7 5 9 7 12 14 6) (tamanho 4 3)) deve verificar se 
;; o bloco 5 [┃] é seguro de ser adicionado à solução, isto é, inserido 
;; na posição lin=2, col=3 da situação descrita acima. Observe que para 
;; este exemplo o bloco 5 é seguro, pois ele se encaixa a todos os 
;; blocos adjacentes: ao bloco 9 à esquerda, ao bloco 12 acima e à 
;; borda direita (branco) do tabuleiro. Veja que não houve necessidade 
;; de se verificar o encaixe com o bloco abaixo, já que o mesmo ainda 
;; não existe na solução.
(define (seguro? bloco solucao tam)
  [cond
    ;;se e primeira linha
    ( (if(< (length solucao) (tamanho-largura tam))
         ;;se e primeiro elemento
         (if (e-o-primeiro? solucao (tamanho-largura tam))
             (and (encaixa-ultimo-esquerda? bloco) (encaixa-ultimo-acima? bloco))
             ;;se e ultimo elemento
             (if (e-o-ultimo? solucao (tamanho-largura tam))
                 (and (encaixa-ultimo-direita? bloco)  (encaixa-anterior? solucao bloco) (encaixa-ultimo-acima? bloco))
                 ;;se e elemento medio
                 (and (encaixa-ultimo-acima? bloco)  (encaixa-anterior? solucao bloco)))) #f))

    ;;se e ultima linha
    ((if(>= (length solucao) (- (* (tamanho-altura tam) (tamanho-largura tam)) (tamanho-largura tam)))
         ;;se e primeiro elemento
         (if (e-o-primeiro? solucao (tamanho-largura tam))
             (and (encaixa-ultimo-esquerda? bloco) (encaixa-superior? solucao bloco tam) (encaixa-ultimo-abaixo? bloco))
             ;;se e ultimo elemento
             (if (e-o-ultimo? solucao (tamanho-largura tam))
                 (and (encaixa-ultimo-direita? bloco)  (encaixa-anterior? solucao bloco)
                      (encaixa-superior? solucao bloco tam) (encaixa-ultimo-abaixo? bloco))
                 ;;se e elemento medio
                 (and  (encaixa-anterior? solucao bloco)
                      (encaixa-superior? solucao bloco tam) (encaixa-ultimo-abaixo? bloco)))) #f))
    
    ;;se linha do meio
    ((if(and (>= (length solucao) (tamanho-largura tam)) (< (length solucao) (- (* (tamanho-altura tam) (tamanho-largura tam)) (tamanho-largura tam))))
         ;;se e primeiro elemento
         (if (e-o-primeiro? solucao (tamanho-largura tam))
             (and (encaixa-ultimo-esquerda? bloco) (encaixa-superior? solucao bloco tam))
             ;;se e ultimo elemento
             (if (e-o-ultimo? solucao (tamanho-largura tam))
                 (and (encaixa-ultimo-direita? bloco)  (encaixa-anterior? solucao bloco)
                      (encaixa-superior? solucao bloco tam))
                 ;;se e elemento medio
                 (and (encaixa-anterior? solucao bloco)
                      (encaixa-superior? solucao bloco tam)))) #f))
    (else
     #f)])

;(seguro? 12 '(3 0 1 12 2 13 11 3 5 5 5 4 12 7 0 8 6) (tamanho 7 3))

;; elemento -> lista
;;Recebe um número e retorna possibilidades
;; Exemplo: "0"
;;          > '( 0 0 0 0)
(define (gera-possibilidades elem)
  (define (possibilidades elem k )
  (cond
    [(equal? elem 0) (list 0)]
    [(equal? elem 15) (list 15)]
    [(or (equal? elem 5) (equal? elem 10)) (list 10 5)]
    [(zero? k) empty]
    [else
     (cons (rotacionar elem) (possibilidades (rotacionar elem) (sub1 k)))]))
  (reverse (possibilidades elem 4)))

;; String -> lista
;;Recebe uma string e transforma em números do jogo
;; Exemplo: "┏━┳┓"
;;          > '((12 9 3 6) (5 10 5 10) (13 11 7 14) (9 3 6 12))
(define (gera-poss caracteres)
(define (converte-string-number palavra possibilidades)
  (cond
    [(zero? (string-length palavra)) possibilidades]
    [else
     (converte-string-number (substring palavra 1)
     (append possibilidades (list (gera-possibilidades(string-contains " ╹╺┗╻┃┏┣╸┛━┻┓┫┳╋" (string (string-ref palavra 0)))))))]))
  (converte-string-number caracteres null))

;; lista -> lista
;; Faz a leitura e processa um jogo armazenado em arquivo.
;; Exemplo: "┗┃┳┓" "┫┻┣┃" "┃┫┣┣" "┏┫┃┗"
;;         >'((6 12 9 3)  (10 5 10 5)  (13 11 7 14) (9 3 6 12)
;             (11 7 14 13)(7 14 13 11) (14 13 11 7) (10 5 10 5)
;             (10 5 10 5) (11 7 14 13) (14 13 11 7) (14 13 11 7)
;;            (12 9 3 6)  (11 7 14 13) (10 5 10 5)  (6 12 9 3))
(define (gera-listas-combinacoes lst)
  (cond
    [(empty? lst) empty]
    [else
      (append (gera-poss (first lst)) (gera-listas-combinacoes (rest lst)))]))

;; String -> Jogo
;; Faz a leitura e processa um jogo armazenado em arquivo.
;; Exemplo: (ler-jogo "..\\testes\\casos\\05.txt")
;;          > '((0 6 6 1) (12 15 15 6) (1 10 10 0) (0 2 1 0))
(define (ler-jogo arquivo)
  (gera-listas-combinacoes (port->lines (open-input-file arquivo))))

;; String -> Número
;; Faz a leitura e processa o tamanho de um jogo armazenado em arquivo.
;; Exemplo: (gerar-tamanho "..\\testes\\casos\\05.txt")
;;          > '(tamanho 4 4)
(define (gerar-tamanho arquivo)
  (let ([arquivoLet (port->lines (open-input-file arquivo))])
  (tamanho (length arquivoLet)
    (string-length (first arquivoLet)))))

;; lista numero -> lista de listas de tamanho numero
;; particiona o jogo a cada i elementos
(define (part lst i)
  (cond
    [(empty? lst) empty]
    [else
  (cons (take lst i)
        (part (drop lst i) i))]))

;;   ( 1 10 10 0)         [╹][━][━][ ]
;;   ( 0  2  1 0))        [ ][╺][╹][ ]
;;
;; a função deve retornar:
;;
;; '((0  6 12 4)          [ ][┏][┓][╻]
;;   (6 15 15 9)     =>   [┏][╋][╋][┛]
;;   (1  5  5 0)          [╹][┃][┃][ ]
;;   (0  1  1 0))         [ ][╹][╹][ ]
(define (resolver possibilidades tamanho)
  (define (resolver-encapsulado solucao possibilidades tamanho)
  (let* ([candidatos (if  (empty? possibilidades) '()  (first possibilidades))]
        [candidato (if  (empty? candidatos) null  (first candidatos))]
        [tamanho-solucao (length solucao)])
    (cond
      [(empty? possibilidades) (part (reverse solucao) (tamanho-largura tamanho))]
      [(empty? candidatos) #f]
      [(seguro? candidato solucao tamanho)
       (or (resolver-encapsulado (cons candidato solucao) (remove candidatos possibilidades) tamanho)
           (resolver-encapsulado solucao (remove candidato (first possibilidades)) tamanho))]
      [else (resolver-encapsulado solucao (remove candidato (first possibilidades)) tamanho)])))
  (resolver-encapsulado null possibilidades tamanho))

;;numero -> caractere
;; Realiza a conversão numero/carctere
;; exemplo:
;;        > 0
(define (converte-number-caractere indice)
(string-ref (list->string blocos-reps) indice))

;; Jogo -> void
;; Escreve o jogo na tela codificado em caracteres.
;; Exemplo: (escrever-jogo '((6 10 14 12) (7 14 13 5) (5 7 11 13) (3 11 10 9))
;;          > ┏━┳┓
;;            ┣┳┫┃
;;            ┃┣┻┫
;;            ┗┻━┛
(define (escrever-jogo jogo)
(cond [ (false? jogo) "nao ha solucao"]
      [(or (empty? jogo)) ""]
     [else
      (string-append (list->string (map converte-number-caractere (first jogo))) "\n" (escrever-jogo (rest jogo)))]))

;; List String -> void
;; Esta é a função principal. Esta função é chamada a partir do arquivo
;; infinity-main.rkt
;;
;; args é a lista de parâmetros para o programa.
;;
;; O primeiro e único parâmetro deve ser o nome (caminho) do arquivo que contém 
;; o jogo a ser resolvido. O jogo é representado na forma de caracteres, o qual
;; deverá ser primeiramente convertido para a representação numérica antes de
;; ser resolvido. Veja exemplos de arquivos no diretório de testes.
;;
;; A saída desta função é a escrita na tela do jogo resolvido, representado na
;; forma de caracteres. Caso o jogo não possua solução, nada deve ser escrito na
;; tela.
(define (main args)
  (display (escrever-jogo(resolver (ler-jogo (first args)) (gerar-tamanho (first args))))))

(define arq1 '("..\\testes\\casos\\01.txt"))
(define arq2 '("..\\testes\\casos\\02.txt"))
(define arq3 '("..\\testes\\casos\\03.txt"))
(define arq4 '("..\\testes\\casos\\04.txt"))
(define arq5 '("..\\testes\\casos\\05.txt"))
(define arq6 '("..\\testes\\casos\\06.txt"))
(define arq7 '("..\\testes\\casos\\07.txt"))
(define arq8 '("..\\testes\\casos\\08.txt"))
(define arq9 '("..\\testes\\casos\\09.txt"))
(define arq10 '("..\\testes\\casos\\10.txt"))
(define arq11 '("..\\testes\\casos\\11.txt"))
(define arq12 '("..\\testes\\casos\\12.txt"))
(define arq13 '("..\\testes\\casos\\13.txt"))
(define arq14 '("..\\testes\\casos\\14.txt"))
(define arq15 '("..\\testes\\casos\\15.txt"))
(define arq16 '("..\\testes\\casos\\16.txt"))
(define arq17 '("..\\testes\\casos\\17.txt"))
(define arq18 '("..\\testes\\casos\\18.txt"))
(define arq19 '("..\\testes\\casos\\19.txt"))
(define arq20 '("..\\testes\\casos\\20.txt"))
(define arq-esp-1 '("..\\testes\\casos\\aleatorio_10x10_curvas.txt"))
(define arq-esp-2 '("..\\testes\\casos\\aleatorio_30x30_curvas"))
(define arq-esp-3 '("..\\testes\\casos\\aleatorio_50x50_curvas.txt"))
(define arq-esp-4 '("..\\testes\\casos\\aleatorio_10x10_tudo.txt"))
(define arq-esp-5 '("..\\testes\\casos\\aleatorio_30x30_tudo.txt"))
(define arq-esp-6 '("..\\testes\\casos\\aleatorio_50x50_tudo.txt"))

(main arq-esp-6)